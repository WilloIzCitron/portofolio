"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = require("@elysiajs/html");
function appCkat(app) {
    app.use((0, html_1.html)())
        .get('/wallpaper1', function () { return ("<html lang=\"en\">\n        <head>\n            <title>Animdustry Wallpaper Renderer: CKAT</title>\n        </head>\n        <body>\n            <script src=\"https://cdn.jsdelivr.net/npm/pixi.js@7.x/dist/pixi.min.js\"></script>\n            <script src=\"https://cdn.jsdelivr.net/npm/pixi-filters@5.x/dist/browser/pixi-filters.min.js\"></script>\n            <script>\n                {\nwindow.onload = function() {\n(async () => {\n// Create Pixi application\nconst app = new PIXI.Application({\nresizeTo: window,\nbackground: '#130d24' // Matching the original background color\n});\ndocument.body.appendChild(app.view);\n\ntry {\nconst texture = await PIXI.Assets.load('https://raw.githubusercontent.com/WilloIzCitron/animdustry/refs/heads/master/skat.png');\n\nfunction gradient(from, to) {\n    const c = document.createElement(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    const grd = ctx.createLinearGradient(0,150,0,0);\n    grd.addColorStop(0, from);\n    grd.addColorStop(1, to);\n    ctx.fillStyle = grd;\n    ctx.fillRect(0,0,app.renderer.screen.width,app.renderer.screen.height);\n    const texture = PIXI.Texture.from(c);\n    return texture;\n  }\n\n// Skat Particles class\nclass SkatParticles extends PIXI.Container {\n    constructor() {\n    super();\n    this.particles = [];\n    this.time = 0;\n    \n    const amount = 100;\n    const partRange = 500;\n    const move = new PIXI.Point(-0.5, 0.5);\n    \n    for (let i = 0; i < amount; i++) {\n        const particle = new PIXI.Sprite(texture);\n        particle.anchor.set(0.5);\n        \n        const speed = Math.random() + 1;\n        const rotSpeed = 0;\n        const scale = Math.random() * 1 + 1;\n        \n        particle.pos = new PIXI.Point(\n        Math.random() * partRange * 3 - partRange,\n        Math.random() * partRange * 3 - partRange\n        );\n        \n        particle.initialData = {\n        speed: speed,\n        rotSpeed: rotSpeed,\n        scale: scale,\n        move: move.clone(),\n        baseRotation: -135 * Math.PI / 180\n        };\n        \n        this.particles.push(particle);\n        this.addChild(particle);\n    }\n    }\n\n    update(delta) {\n    const deltaTime = delta / 60;\n    this.time += deltaTime;\n\n    const viewportWidth = app.renderer.screen.width;\n    const viewportHeight = app.renderer.screen.height;\n\n    this.particles.forEach(particle => {\n        const data = particle.initialData;\n        \n        particle.pos.x += data.move.x * data.speed * deltaTime * 50;\n        particle.pos.y += data.move.y * data.speed * deltaTime * -50;\n        \n        const margin = 2;\n        if (particle.pos.x < -margin) particle.pos.x += viewportWidth + margin * 3;\n        if (particle.pos.y < -margin) particle.pos.y += viewportHeight + margin * 3;\n        if (particle.pos.x > viewportWidth + margin) particle.pos.x -= viewportWidth + margin * 3;\n        if (particle.pos.y > viewportHeight + margin) particle.pos.y -= viewportHeight + margin * 3;\n        \n        particle.rotation = data.baseRotation + this.time * data.rotSpeed;\n        particle.scale.set(data.scale);\n        particle.position.copyFrom(particle.pos);\n    });\n    }\n}\n\nconst obj = new PIXI.Graphics();\nobj.beginFill('#332d4f');\n//make a stripes pattern\nconst stripeRotation = 45;\nconst stripeWidth = 75;\nconst stripeHeight = app.renderer.screen.height * 4;\nconst stripeSpacing = 75;\nconst numStripes = Math.ceil((app.renderer.screen.width > app.renderer.screen.height) ? app.renderer.screen.width : app.renderer.screen.height / (stripeWidth + stripeSpacing));\n\nfor (let i = -10; i < numStripes; i++) {\n    obj.drawRect(i * (stripeWidth + stripeSpacing), 0, stripeWidth, stripeHeight);\n    obj.rotation = stripeRotation * (Math.PI / 180);\n}\n\nobj.endFill();\nobj.position.set(app.renderer.screen.width, 0);\napp.stage.addChild(obj);\n\nobj2 = new PIXI.Sprite(gradient('#130d24', '#00000000'));\nobj2.width = app.renderer.screen.width;\nobj2.height = app.renderer.screen.height;\nobj2.anchor.set(0, 0);\napp.stage.addChild(obj2);\n\n\nconst skatParticles = new SkatParticles();\napp.stage.addChild(skatParticles);\n\napp.ticker.add((delta) => {\n    skatParticles.update(delta);\n});\n\nwindow.addEventListener('resize', () => {\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n});\nconsole.log('\uD83C\uDFA8\uD83D\uDD8C\uFE0F PIXI.js has been loaded!');\n\n} catch (error) {\nconsole.error('Error loading resources:', error);\ndocument.body.innerHTML = '<h2 style=\"color: white\">Failed to load particles. Check console for details.</h2>';\n}\n})();\n}           }\n            </script>\n            <style>\n                {\n                html, body {\n                    margin: 0;\n                padding: 0;\n                width: 100%;\n                height: 100%;\n                overflow: hidden;\n                background-color: #aaa;\n}\n\n                .container {\n                    display: flex;\n                justify-content: center;\n                height: 100%;\n}\n                canvas {\n                    height: 100%;\n}\n                }\n            </style>\n        </body>\n    </html>"); });
}
exports.default = appCkat;
